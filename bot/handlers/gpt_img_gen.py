from openai import OpenAI

from aiogram.filters import Command
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from ai.image_generator import ImageGenerator

from ..states import ImgGenStates
from ..keyboards import CancelKB, DialogueKB
from ..wrappers import validators

from storage.models import User

from config import config


gpt_img_gen_router = Router()


@gpt_img_gen_router.message(Command('generate'))
async def ask_model(message: Message, state: FSMContext, user: User) -> None:
    cancel_btn = CancelKB().place()
    kb = DialogueKB(config.IMAGE_MODELS.keys()).place(
        placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö'
    )
    user_id = user.id
    await state.update_data(
        user_id=user_id,
        cancel_btn=cancel_btn,
        models_kb=kb,
    )
    msg = (
        'üëÄ <em><strong>–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏</strong>\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å</em>'
    )
    msg2 = (
        '<em>*–î–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏,\n–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å'
        ' –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å–Ω–∏–∑—É</em>'
    )

    await message.answer(msg, reply_markup=cancel_btn)
    await message.answer(msg2, reply_markup=kb)
    await state.set_state(ImgGenStates.model)


@gpt_img_gen_router.message(ImgGenStates.model)
@validators
async def ask_size(message: Message, state: FSMContext) -> None:
    model = message.text
    kb = DialogueKB(config.IMAGE_SIZES[model]).place(
        placeholder='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    )
    context = await state.get_data()
    cancel_btn = context.get('cancel_btn')
    msg = (
        '<em>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</em>'
    )
    msg2 = (
        f'<em>–î–ª—è –º–æ–¥–µ–ª–∏ <strong>{model}</strong>\n'
        f'üîΩ–î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã üîΩ</em>'
    )
    await message.answer(msg, reply_markup=cancel_btn)
    await message.answer(msg2, reply_markup=kb)
    await state.update_data(sizes_kb=kb, model=model)
    await state.set_state(ImgGenStates.size)


@gpt_img_gen_router.message(ImgGenStates.size)
@validators
async def ask_quality(message: Message, state: FSMContext) -> None:
    size = message.text
    kb = DialogueKB(['standard', 'hd']).place(
        placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    )
    context = await state.get_data()
    cancel_btn = context.get('cancel_btn')
    msg = (
        '<em>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</em>'
    )
    msg2 = (
        '<em>*–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n'
        '—Ä–∞—Å—Ö–æ–¥—É–µ—Ç 2 –∑–∞–ø—Ä–æ—Å–∞</em>'
    )
    await message.answer(msg, reply_markup=cancel_btn)
    await message.answer(msg2, reply_markup=kb)
    await state.update_data(quality_kb=kb, size=size)
    await state.set_state(ImgGenStates.quality)


@gpt_img_gen_router.message(ImgGenStates.quality)
@validators
async def ask_prompt(message: Message, state: FSMContext) -> None:
    quality = message.text
    context = await state.get_data()
    cancel_btn = context.get('cancel_btn')
    msg = (
        '<em><strong>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å (prompt)\n\n'
        '–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:</strong>\n\n'
        '"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—à–∫–∏ —Å –∑–µ–ª–µ–Ω—ã–º–∏ –≥–ª–∞–∑–∞–º–∏ –Ω–∞ —Ç—Ä–∞–≤–µ"</em>'
    )
    await message.answer(msg, reply_markup=cancel_btn)
    await state.update_data(quality=quality)
    await state.set_state(ImgGenStates.prompt)


@gpt_img_gen_router.message(ImgGenStates.prompt)
@validators
async def generate_image(
        message: Message,
        state: FSMContext,
        user: User
) -> None:

    prompt = message.text
    context = await state.get_data()
    model = context.get('model')
    size = context.get('size')
    quality = context.get('quality')
    client = OpenAI(api_key=config.OPENAI_KEY)
    dialogue = ImageGenerator(client, user, model)
    image_url = await dialogue.generate_image(prompt, size, quality)
    await message.answer_photo(image_url, caption=prompt)
    await state.clear()


@gpt_img_gen_router.callback_query(F.data == 'generate')
async def generate_callback(
        callback: CallbackQuery,
        state: FSMContext,
        user: User
) -> None:

    await ask_model(callback.message, state, user)
