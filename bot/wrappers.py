from functools import wraps

from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from bot import exceptions as e
from bot.keyboards import InlineMenu

from .states import TextStates


def validators(func):
    @wraps(func)
    async def wrapper(message: Message, state: FSMContext, *args, **kwargs):
        context = await state.get_data()
        cancel_btn = context.get('cancel_btn')
        try:
            return await func(message, state, *args, **kwargs)
        except e.IncorrectModelError:
            models_kb = context.get('models_kb')
            msg = (
                'üî¥üî¥üî¥\n\n'
                '<strong>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –º–æ–¥–µ–ª—å!</strong>'
            )
            msg2 = (
                '<em>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –º–æ–¥–µ–ª—å—é</em>'
            )
            await message.answer(msg, reply_markup=cancel_btn)
            await message.answer(msg2, reply_markup=models_kb)
            await state.set_state(TextStates.choseModel)
        except e.InsufficientFundsError:
            menu = InlineMenu().place(
                **{
                    '–î–æ–∫—É–ø–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã': 'buy',
                    '–ù–∞ –≥–ª–∞–≤–Ω—É—é': 'start',
                    '–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥': 'ask',
                }
            )
            msg = (
                'üî¥üî¥üî¥\n\n'
                '<strong>–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã üòî</strong>\n\n'
                '<em>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å!</em>'
            )
            await message.answer(msg, reply_markup=menu)
            await state.clear()
    return wrapper
