from functools import wraps

from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from bot import exceptions as e
from bot.keyboards import InlineMenu

from .states import TextStates, ImgEditStates, ImgGenStates


def validators(func):
    @wraps(func)
    async def wrapper(message: Message, state: FSMContext, *args, **kwargs):
        context = await state.get_data()
        cancel_btn = context.get('cancel_btn')
        try:
            return await func(message, state, *args, **kwargs)
        except e.IncorrectModelError:
            models_kb = context.get('models_kb')
            msg = (
                'üî¥üî¥üî¥\n\n'
                '<strong>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –º–æ–¥–µ–ª—å!</strong>'
            )
            msg2 = (
                '<em>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –º–æ–¥–µ–ª—å—é</em>'
            )
            await message.answer(msg, reply_markup=cancel_btn)
            await message.answer(msg2, reply_markup=models_kb)
            await state.set_state(TextStates.choseModel)
        except e.InsufficientFundsError:
            menu = InlineMenu().place(
                **{
                    '–î–æ–∫—É–ø–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã': 'buy',
                    '–ù–∞ –≥–ª–∞–≤–Ω—É—é': 'start',
                    '–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥': 'ask',
                }
            )
            msg = (
                'üî¥üî¥üî¥\n\n'
                '<strong>–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã üòî</strong>\n\n'
                '<em>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å!</em>'
            )
            await message.answer(msg, reply_markup=menu)
            await state.clear()
        except e.IncorrectImageSizeError:
            kb = context.get('sizes_kb')
            msg = (
                'üî¥üî¥üî¥\n\n'
                '<strong>Open AI –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ç–∞–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞'
                '</strong>'
            )
            msg2 = (
                '<em>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏\n'
                '–∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ</em>'
            )
            await message.answer(msg, reply_markup=cancel_btn)
            await message.answer(msg2, reply_markup=kb)
            current_state = await state.get_state()
            if current_state == ImgEditStates.erased:
                await state.set_state(ImgEditStates.erased)
            elif current_state == ImgGenStates.size:
                await state.set_state(ImgGenStates.size)
        except e.IncorrectImageFormatError:
            msg = (
                'üî¥üî¥üî¥\n\n'
                '<strong>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</strong>\n\n'
                '<em>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ <strong>.PNG</strong>\n'
                '–ù–µ –∑–∞–±—É–¥—Ç–µ —Å–Ω—è—Ç—å –≥–∞–ª–æ—á–∫—É —Å –æ–ø—Ü–∏–∏ "Compress the image"\n\n'
                '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑</em>'
            )
            await message.answer(msg, reply_markup=cancel_btn)
            current_state = await state.get_state()
            if current_state == ImgEditStates.original:
                await state.set_state(ImgEditStates.original)
            elif current_state == ImgEditStates.erased:
                await state.set_state(ImgEditStates.erased)
        except e.AspectRatioMismatchError:
            msg = (
                'üî¥üî¥üî¥\n\n'
                '<strong>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º!</strong>\n\n'
                '<em>–î–ª–∏–Ω–Ω–∞ –∏ —à–∏—Ä–∏–Ω–∞ –≤–∞—à–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–≤–Ω—ã,\n'
                '–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ Open AI\n\n'
                '–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –µ–≥–æ –µ—â–µ —Ä–∞–∑\n'
                '</em>'
            )
            await message.answer(msg, reply_markup=cancel_btn)
            current_state = await state.get_state()
            if current_state == ImgEditStates.original:
                await state.set_state(ImgEditStates.original)
            elif current_state == ImgEditStates.erased:
                await state.set_state(ImgEditStates.erased)
        except e.UnknownQualityError:
            kb = context.get('quality_kb')
            msg = (
                'üî¥üî¥üî¥\n\n'
                '<strong>–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ</strong>'
            )
            msg2 = (
                '<em>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–π\n'
                '–∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ</em>'
            )
            await message.answer(msg, reply_markup=cancel_btn)
            await message.answer(msg2, reply_markup=kb)
            await state.set_state(ImgGenStates.size)
    return wrapper
